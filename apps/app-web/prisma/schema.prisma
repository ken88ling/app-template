// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String?
  password     String
  role         String   @default("customer")
  profileImage String?  @map("profile_image")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  orders               Order[]
  commissionsReceived  Commission[]      @relation("RecipientCommissions")
  commissionsGenerated Commission[]      @relation("UserCommissions")
  relationships        UserRelationship[] @relation("UserRelationships")
  uplineFor           UserRelationship[] @relation("UplineRelationships")
  points              UserPoints?
  userRoles           UserRole[]
  accountRequests     AccountRequest[]
  verificationCodes   EmailVerification[]

  @@map("users")
}

// Product model
model Product {
  id                Int      @id @default(autoincrement())
  name              String
  description       String?
  price             Float
  discountEssential Float    @default(0.10) @map("discount_essential")
  discountPremium   Float    @default(0.25) @map("discount_premium")
  category          String?
  imageUrl          String?  @map("image_url")
  inStock           Boolean  @default(true) @map("in_stock")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  orderItems         OrderItem[]
  productCommissions ProductCommissionTier[]

  @@map("products")
}

// Order model
model Order {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  total     Float    @default(0)
  status    String   @default("pending")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       OrderItem[]
  commissions Commission[]

  @@index([userId, status])
  @@map("orders")
}

// OrderItem model
model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  productId Int      @map("product_id")
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// MembershipTier model
model MembershipTier {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  price       Float
  discount    Float    @default(0)
  benefits    String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("membership_tiers")
}

// Commission System Models

// UserRelationship model - tracks upline/downline connections
model UserRelationship {
  id               Int      @id @default(autoincrement())
  userId           Int      @map("user_id")
  uplineId         Int?     @map("upline_id")
  relationshipLevel Int     @default(1) @map("relationship_level")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user   User  @relation("UserRelationships", fields: [userId], references: [id], onDelete: Cascade)
  upline User? @relation("UplineRelationships", fields: [uplineId], references: [id], onDelete: SetNull)

  @@unique([userId, uplineId])
  @@map("user_relationships")
}

// CommissionTier model - defines commission rates by level
model CommissionTier {
  id                     Int      @id @default(autoincrement())
  tierLevel              Int      @unique @map("tier_level")
  tierName               String   @map("tier_name")
  directCommissionRate   Float    @map("direct_commission_rate")
  indirectCommissionRate Float    @map("indirect_commission_rate")
  pointsRate             Int      @default(0) @map("points_rate")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  @@map("commission_tiers")
}

// Commission model - tracks earned commissions
model Commission {
  id                Int      @id @default(autoincrement())
  orderId           Int      @map("order_id")
  userId            Int      @map("user_id")
  recipientId       Int      @map("recipient_id")
  amount            Float
  commissionRate    Float    @map("commission_rate")
  relationshipLevel Int      @map("relationship_level")
  status            String   @default("pending")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  order     Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user      User  @relation("UserCommissions", fields: [userId], references: [id], onDelete: Cascade)
  recipient User  @relation("RecipientCommissions", fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("commissions")
}

// UserPoints model - tracks points earned from commissions
model UserPoints {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique @map("user_id")
  points    Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_points")
}

// Product Commission System Models

// ProductCommissionTier model
model ProductCommissionTier {
  id                      Int      @id @default(autoincrement())
  productId               Int      @unique @map("product_id")
  productName             String   @map("product_name")
  retailPrice             Float    @map("retail_price")
  traderPrice             Float    @map("trader_price")
  distributorPrice        Float    @map("distributor_price")
  traderCommissionMin     Float    @map("trader_commission_min")
  traderCommissionMax     Float    @map("trader_commission_max")
  distributorCommissionMin Float   @map("distributor_commission_min")
  distributorCommissionMax Float   @map("distributor_commission_max")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_commission_tiers")
}

// UserRoleType model
model UserRoleType {
  id                   Int      @id @default(autoincrement())
  roleName             String   @unique @map("role_name")
  description          String?
  commissionMultiplier Float    @default(1.0) @map("commission_multiplier")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  userRoles UserRole[]

  @@map("user_role_types")
}

// UserRole model
model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  roleId    Int      @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role UserRoleType @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

// VolumeBonusTier model
model VolumeBonusTier {
  id              Int      @id @default(autoincrement())
  minVolume       Float    @map("min_volume")
  maxVolume       Float?   @map("max_volume")
  bonusPercentage Float    @map("bonus_percentage")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("volume_bonus_tiers")
}

// Additional models

// GiftItem model
model GiftItem {
  id                  Int      @id @default(autoincrement())
  name                String
  description         String?
  requiredPurchases   Int      @map("required_purchases")
  imageUrl            String?  @map("image_url")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("gift_items")
}

// Promotion model
model Promotion {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?
  discountType  String    @map("discount_type")
  discountValue Float     @map("discount_value")
  minPurchase   Float?    @map("min_purchase")
  startDate     DateTime  @map("start_date")
  endDate       DateTime? @map("end_date")
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("promotions")
}

// AccountRequest model
model AccountRequest {
  id             Int       @id @default(autoincrement())
  userId         Int       @map("user_id")
  requestType    String    @map("request_type")
  requestDetails String?   @map("request_details")
  status         String    @default("pending")
  adminNotes     String?   @map("admin_notes")
  processedAt    DateTime? @map("processed_at")
  processedBy    Int?      @map("processed_by")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account_requests")
}

// EmailVerification model for login verification
model EmailVerification {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  email      String
  code       String
  type       String   @default("login") // login, registration, password_reset
  expiresAt  DateTime @map("expires_at")
  verified   Boolean  @default(false)
  attempts   Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([email, code])
  @@index([userId, type])
  @@map("email_verifications")
}